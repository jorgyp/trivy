trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: self

variables:
- name: GCR_PATH
  value: GCR_PATH
- name: TAG
  value: latest
# - group: PipelineVariables

stages: 
- stage: DockerBuildValidatePush
  displayName: Build Test Push
  jobs:
    - deployment: DeployImageToGCR
      displayName: Build Test Push
      environment: 'trivy'
      pool:
        vmImage: 'ubuntu-latest' # Set value in Azure Dev Ops Build Pipeline
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              name: Google_Credentials
              displayName: 'Download Google GCR Credentials'
              inputs:
                secureFile: 'google_service_auth.json'
            - task: Bash@3
              inputs:
                #build
                docker build -f ./Dockerfile-builtin-db -t gcr.io/$(GCR_PATH)/external/trivy:$(TAG) .

                docker save "gcr.io/$(GCR_PATH)/external/trivy:$(TAG)" -o ./imagefile.tar
                chmod 777 ./imagefile.tar
                
                #scan image for vulnerability
                securityScan=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/opt/test aquasec/trivy --input /opt/test/imagefile.tar)
                
                #fail if vulnerabilities found
                if [[ $securityScan != *"CRITICAL: 0"* ]] || [[ $securityScan != *"HIGH: 0"* ]]; then 
                  echo 'found high vulnerabilities' 
                  exit 1 
                else 
                  echo 'no high vulnerability found'
                fi
                
                docker push gcr.io/$(GCR_PATH)/external/trivy:$(TAG)
              displayName: 'Publish To GCR'